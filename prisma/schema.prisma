generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                          Int                  @id @default(autoincrement())
  firstName                   String?
  lastName                    String?
  firebaseToken               String?
  device                      String?              @default("Android")
  userName                    String?
  password                    String
  email                       String?              @unique
  phone                       String?              @unique
  reference_id                Int?
  referenceid_two             Int?
  dob                         DateTime?
  emergencycontact            String?
  nicno                       String?
  firstaid                    String?
  firstaidtext                String?
  dbscheck                    String?
  dbschecktext                String?
  safeguarding                String?
  safeguardingtext            String?
  bankallowedleave            String?              @default("8")
  remaingbankallowedleave     String?              @default("8")
  annualallowedleave          String?              @default("20")
  remainingannualallowedleave String?              @default("20")
  companyname                 String?
  designation                 String?
  joining_date                DateTime?
  end_date                    DateTime?
  address                     String?
  manualleave                 Float?
  contractAttachment          String?
  reference_contact           String?
  referencecontacttwo         String?
  resetPasswordToken          String?
  resetPasswordExpires        DateTime             @default(now())
  street                      String?
  city                        String?
  state                       String?
  zipCode                     String?
  country                     String?
  joinDate                    DateTime?
  leaveDate                   DateTime?
  employeeId                  String?              @unique
  bloodGroup                  String?
  image                       String?
  documents                   String?
  employmentStatusId          Int?
  departmentId                Int?
  roleId                      Int?
  shiftId                     Int?
  locationId                  Int?
  leavePolicyId               Int?
  weeklyHolidayId             Int?
  status                      Boolean              @default(true)
  applicationStatus           String               @default("PENDING")
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  address1                    String?
  companyname1                String?
  designation1                String?
  emp_email                   String?
  emp_email1                  String?
  emp_name                    String?
  emp_name1                   String?
  emp_telno                   String?
  emp_telno1                  String?
  end_date1                   DateTime?
  joining_date1               DateTime?
  isLogin                     Boolean              @default(true)
  visaExpiry                  String?
  visaStatus                  String?
  attendance                  attendance[]
  awardHistory                awardHistory[]
  designationHistory          designationHistory[]
  educations                  education[]
  leaveApplication            leaveApplication[]
  payslip                     payslip[]
  project                     project[]
  projectTeamMember           projectTeamMember[]
  room                        room[]
  salaryHistory               salaryHistory[]
  shifts                      shifts[]
  department                  department?          @relation(fields: [departmentId], references: [id])
  employmentStatus            employmentStatus?    @relation(fields: [employmentStatusId], references: [id])
  leavePolicy                 leavePolicy?         @relation(fields: [leavePolicyId], references: [id])
  location                    location?            @relation(fields: [locationId], references: [id])
  role                        role?                @relation(fields: [roleId], references: [id])
  shift                       shift?               @relation(fields: [shiftId], references: [id])
  weeklyHoliday               weeklyHoliday?       @relation(fields: [weeklyHolidayId], references: [id])
  meeting                     meeting[]            @relation("meetingTouser")
  task                        task[]               @relation("taskTouser")
}

model education {
  id           Int       @id @default(autoincrement())
  userId       Int
  degree       String?
  institution  String?
  fieldOfStudy String?
  result       String?
  startDate    DateTime?
  endDate      DateTime?
  status       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         user      @relation(fields: [userId], references: [id])
}

model location {
  id           Int       @id @default(autoincrement())
  latitude     String?
  longitude    String?
  locationName String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  meeting      meeting[]
  room         room[]
  shifts       shifts[]
  user         user[]
}

model salaryHistory {
  id        Int       @id @default(autoincrement())
  userId    Int
  salary    Float
  startDate String
  endDate   DateTime?
  comment   String?
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      user      @relation(fields: [userId], references: [id])
}

model designation {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  designationHistory designationHistory[]
}

model department {
  id      Int       @id @default(autoincrement())
  name    String
  status  Boolean   @default(true)
  meeting meeting[]
  task    task[]
  user    user[]
}

model employmentStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  colourValue String
  description String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user[]
}

model designationHistory {
  id            Int         @id @default(autoincrement())
  userId        Int
  designationId Int
  startDate     DateTime
  endDate       DateTime?
  comment       String?
  designation   designation @relation(fields: [designationId], references: [id])
  user          user        @relation(fields: [userId], references: [id])
}

model shift {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  workHour  Float
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startTime DateTime @db.Timestamptz(6)
  endTime   DateTime @db.Timestamptz(6)
  user      user[]
}

model award {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  image        String?
  status       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  awardHistory awardHistory[]
}

model awardHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  awardId     Int
  awardedDate DateTime
  comment     String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  award       award    @relation(fields: [awardId], references: [id])
  user        user     @relation(fields: [userId], references: [id])
}

model attendance {
  id               Int      @id @default(autoincrement())
  userId           Int
  inTime           String?
  outTime          String?
  ip               String?
  comment          String?
  punchBy          Int?
  totalHour        String?
  overtime         String?
  inTimeStatus     String?
  outTimeStatus    String?
  attendenceStatus String?
  date             String
  status           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             user     @relation(fields: [userId], references: [id])
}

model leaveApplication {
  id              Int       @id @default(autoincrement())
  employeeid      String?
  userId          Int
  leaveType       String
  leavecategory   String?
  leaveFrom       DateTime
  leaveTo         DateTime
  daytype         String?
  fromtime        String?
  totime          String?
  acceptLeaveFrom DateTime?
  acceptLeaveTo   DateTime?
  acceptLeaveBy   Int?
  leaveDuration   Float?
  reason          String?
  reviewComment   String?
  attachment      String?
  status          String    @default("PENDING")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            user      @relation(fields: [userId], references: [id])
}

model payslip {
  id                Int      @id @default(autoincrement())
  userId            Int
  salaryMonth       Int
  salaryYear        Int
  salary            Float
  paidLeave         Int
  unpaidLeave       Int
  monthlyHoliday    Int
  publicHoliday     Int
  workDay           Int
  shiftWiseWorkHour Float
  monthlyWorkHour   Float
  hourlySalary      Float
  workingHour       Float
  salaryPayable     Float
  bonus             Float
  bonusComment      String?
  deduction         Float
  deductionComment  String?
  totalPayable      Float
  paymentStatus     String   @default("UNPAID")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              user     @relation(fields: [userId], references: [id])

  @@unique([userId, salaryMonth, salaryYear])
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model leavePolicy {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  paidLeaveCount   Int
  unpaidLeaveCount Int
  status           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             user[]
}

model weeklyHoliday {
  id        Int      @id @default(autoincrement())
  name      String
  startDay  String
  endDay    String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user[]
}

model publicHoliday {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model project {
  id               Int           @id @default(autoincrement())
  projectManagerId Int
  name             String
  startDate        DateTime
  endDate          DateTime
  description      String
  status           String        @default("PENDING")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  milestone        milestone[]
  projectManager   user          @relation(fields: [projectManagerId], references: [id])
  projectTeam      projectTeam[]
  taskStatus       taskStatus[]
}

model milestone {
  id          Int      @id @default(autoincrement())
  projectId   Int
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model task {
  id              Int         @id @default(autoincrement())
  departmentId    Int?
  name            String
  startDate       DateTime
  endDate         DateTime
  completionTime  Float?
  assignedBy      Int?
  description     String?
  reviewComment   String?
  priorityId      Int
  taskStatus      String      @default("PENDING")
  adminattachment String?
  userAttachment  String?
  updatedBy       Int?
  status          Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  department      department? @relation(fields: [departmentId], references: [id])
  priority        priority    @relation(fields: [priorityId], references: [id], onDelete: Cascade)
  user            user[]      @relation("taskTouser")
}

model taskStatus {
  id        Int     @id @default(autoincrement())
  projectId Int
  name      String
  status    Boolean @default(true)
  project   project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
}

model priority {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status Boolean @default(true)
  task   task[]
}

model projectTeam {
  id                Int                 @id @default(autoincrement())
  projectTeamName   String
  projectId         Int
  status            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  assignedTask      assignedTask[]
  project           project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectTeamMember projectTeamMember[]
}

model projectTeamMember {
  id            Int         @id @default(autoincrement())
  projectTeamId Int
  userId        Int
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectTeam   projectTeam @relation(fields: [projectTeamId], references: [id], onDelete: Cascade)
  user          user        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model assignedTask {
  id            Int         @id @default(autoincrement())
  projectTeamId Int
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectTeam   projectTeam @relation(fields: [projectTeamId], references: [id], onDelete: Cascade)
}

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  status         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission rolePermission[]
  user           user[]
}

model permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission rolePermission[]
}

model rolePermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int
  status        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model account {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  type       String
  subAccount subAccount[]
}

model subAccount {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  account_id Int
  status     Boolean       @default(true)
  account    account       @relation(fields: [account_id], references: [id])
  credit     transaction[] @relation("credit")
  debit      transaction[] @relation("debit")
}

model transaction {
  id          Int        @id @default(autoincrement())
  date        DateTime
  debit_id    Int
  credit_id   Int
  particulars String
  amount      Float
  type        String?
  related_id  Int?
  status      Boolean    @default(true)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  credit      subAccount @relation("credit", fields: [credit_id], references: [id], onDelete: Cascade)
  debit       subAccount @relation("debit", fields: [debit_id], references: [id], onDelete: Cascade)
}

model appSetting {
  id           Int    @id @default(autoincrement())
  company_name String
  tag_line     String
  address      String
  phone        String
  email        String
  website      String
  footer       String
}

model training {
  id        Int       @id @default(autoincrement())
  day       String?
  leaveFrom DateTime?
  leaveTo   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model meeting {
  id           Int         @id @default(autoincrement())
  departmentId Int?
  locationId   Int?
  assignedBy   Int?
  meetingdate  DateTime?
  startTime    DateTime
  endTime      DateTime
  meetingType  String?
  meetingLink  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  department   department? @relation(fields: [departmentId], references: [id])
  location     location?   @relation(fields: [locationId], references: [id])
  user         user[]      @relation("meetingTouser")
}

model room {
  id         Int        @id @default(autoincrement())
  locationId Int?
  userId     Int
  roomName   String?
  status     Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  schedule   Schedule[]
  location   location?  @relation(fields: [locationId], references: [id])
  user       user       @relation(fields: [userId], references: [id])
}

model shifts {
  id          Int        @id @default(autoincrement())
  locationId  Int?
  shiftFrom   DateTime?
  shiftTo     DateTime?
  weekNumber  Int?
  userId      Int?
  assignedBy  Int?
  generalInfo String?
  status      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String?
  schedule    Schedule[]
  location    location?  @relation(fields: [locationId], references: [id])
  user        user?      @relation(fields: [userId], references: [id])
}

model Schedule {
  id         Int       @id @default(autoincrement())
  day        String?
  shiftDate  String?
  startTime  String?
  endTime    String?
  breakTime  Int?
  folderTime Int?
  roomId     Int?
  workHour   Float?
  status     Boolean   @default(true)
  shiftsId   Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  room       room?     @relation(fields: [roomId], references: [id])
  shifts     shifts?   @relation(fields: [shiftsId], references: [id])
  request    request[]
}

model request {
  id             Int       @id @default(autoincrement())
  FromScheduleId Int?
  ToScheduleId   Int?
  userId         Int?
  reason         String?
  requststatus   String    @default("PENDING")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  schedule       Schedule? @relation(fields: [FromScheduleId], references: [id])
}
